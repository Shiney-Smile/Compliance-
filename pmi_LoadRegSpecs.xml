<AML>
 <Item type="Method" id="275994D81B614CB9874083C2957BEC82" action="add">
  <comments>This Method will load Reg Specs according to Sub Family and Item Type of part</comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[Innovator inn = this.getInnovator();
var mainLogger = NLog.LogManager.GetCurrentClassLogger();

try
{
    string type = this.getProperty("type","");
    string partID = "";
    string relType = "";
    string itemType = this.getProperty("itemType", "");
    string relTypeName = "";
    
        partID = this.getProperty("pmi_PartCode","");
        if(itemType == "pmi_RegulatorySpec")
        {
            relType = "pmi_regSpec_CompPartBoM";
            relTypeName = "Regulatory Specifications";
        }
        else
        {
            relType = "pmi_ToxSpecReview";
            relTypeName = "Tox Specifications";
        }
    	
    
    Item partItem = inn.newItem("part", "get");
    partItem.setProperty("id",partID);
    partItem.setAttribute("serverEvents", "0");
    partItem.setAttribute("select","id,keyed_name,classification,pmi_sub_families");  
    partItem = partItem.apply();
    if (partItem.isError() || partItem.isEmpty()) {
        mainLogger.Error("MethodName : pmi_LoadRegSpecs \n Message: Error in fetching Part Item " + partItem.getErrorString()+"");
        return inn.newError("Error in fetching Part Item " + partItem.getErrorString());
    }
    string partType = partItem.getProperty("classification","");
    string partSubFam = partItem.getProperty("pmi_sub_families","");
    List<string> regSpecsInSys = new List<string>();
    Item appendItems = null;
    Item applyAML = null;
    Item addrelated = null;
    string sqlQuery =  string.Empty;
    
    if(itemType == "pmi_RegulatorySpec")
    {
        sqlQuery = "select id from [innovator].[pmi_RegulatorySpec] with(nolock) where pmi_classificationlist_text Like '%"+partType+"%' AND pmi_part_sub_families Like '%"+partSubFam+"%' AND state Like '%Active%' and is_current='1'";
    }
    else
    {
        sqlQuery = "select id from [innovator].[pmi_Toxocology_Spec] with(nolock) where pmi_classificationlist_text Like '%"+partType+"%' AND pmi_part_sub_families Like '%"+partSubFam+"%' AND state Like '%Active%' and is_current='1'";
    }
    Item resultSQL = inn.applySQL(sqlQuery);
    if(resultSQL.isError() || resultSQL.isEmpty() || resultSQL.getItemCount() <= 0)
    {
        mainLogger.Error("MethodName : pmi_LoadRegSpecs \n Message: "+relTypeName+" matching with Part's Item type and Sub Family are not found" + resultSQL.getErrorString()+"");
        return inn.newError(""+relTypeName+" matching with Part's Item type and Sub Family are not found" + resultSQL.getErrorString());
    }
    else 
        {
            Item relationItem = inn.newItem("Part","get");
			int resultSQLCount = resultSQL.getItemCount();
            for(int i = 0; i < resultSQLCount; i++)
            {
                //reg specs matching with item type and sub family of part
                Item getItemByIndex = resultSQL.getItemByIndex(i);
                regSpecsInSys.Add(getItemByIndex.getProperty("id",string.Empty));
            }
            
    		Item deleteRegSpec = inn.applySQL(string.Format(@"delete from innovator.{0} where SOURCE_ID = '{1}'", relType, this.getProperty("id","")));
    		if(deleteRegSpec.isError())
    		{
    			mainLogger.Error("MethodName : pmi_LoadRegSpecs \n Message: Error while deleting Regulatory Specifications" + deleteRegSpec.getErrorString()+"");
    			return inn.newError("Error while deleting Regulatory Specifications " + deleteRegSpec.getErrorString());
    		}
            
            foreach(string regSpec in regSpecsInSys)
            {
                if(type == "pmi_ComplianceReplicaBOM" && itemType == "pmi_RegulatorySpec")
                {
                    addrelated = inn.newItem("pmi_regSpec_CompPartBoM", "add");
                    addrelated.setProperty("source_id", this.getProperty("id",""));
                }
                else
                {
                    addrelated = inn.newItem("pmi_ToxSpecReview", "add");
                    addrelated.setProperty("source_id", this.getProperty("id",""));
                }
    
                addrelated.setProperty("related_id",regSpec);
                addrelated.setAttribute("doGetItem", "0");
                if(appendItems == null)
                {
                    appendItems = addrelated;
                }
                else
                {
                    appendItems.appendItem(addrelated);
                }
            }
            if(appendItems.getItemCount() == 1)
            {
                applyAML = inn.applyAML("<AML>"+appendItems.ToString()+"</AML>");
            }
            else
            {
                applyAML = inn.applyAML(appendItems.ToString());
            }
            if (applyAML.isError()) 
            {
                mainLogger.Error("MethodName : pmi_LoadRegSpecs \n Message: Error in Append Items");
                return inn.newError("Error in Append Items");
            }
    		int amlCount = applyAML.getItemCount();
            for(int i = 0; i < amlCount; i++)
            {
                //reg specs matching with item type and sub family of part
                Item getItemByIndex = applyAML.getItemByIndex(i);
                relationItem.setID(partID);
                relationItem.setAttribute("select","id");
                relationItem.setAttribute("serverEvents", "0");
                relationItem.addRelationship(getItemByIndex);
            }
            relationItem = relationItem.apply();
            if (relationItem.isError()) 
    		{
    			mainLogger.Error("MethodName : pmi_LoadRegSpecs \n Message: Error while attaching relationhip in Part item " + relationItem.getErrorString());
                return inn.newError("Error while attaching relationship in Part item " + relationItem.getErrorString());
            }
        }
    return this;
}
catch(Exception e)
{
    mainLogger.Error(e.Message);
    return inn.newError(e.Message);
}]]></method_code>
  <method_type>C#</method_type>
  <name>pmi_LoadRegSpecs</name>
 </Item>
</AML>